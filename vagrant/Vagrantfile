# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
 config.vm.define "instancia1" do |i1|
        i1.vm.box = "centos/7"
        i1.vm.network "private_network", ip: "192.168.33.30"
        i1.ssh.insert_key = false
        i1.vm.provision :shell, :inline => "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config; sudo systemctl restart sshd;", run: "always"
        i1.vm.provision "shell", inline: <<-SHELL
            cat /home/vagrant/.ssh/me.pub >> /home/vagrant/.ssh/authorized_keys
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
            yum install -y git
            mkdir test
            cd test
            git clone https://github.com/JJRINCON/serviceL1SD.git --branch master --single-branch
            sleep 4s
            cd serviceL1SD
            npm install
            npm install -g pm2
            export PATH=/usr/bin:$PATH
            export PM2_HOME="/home/vagrant/.pm2"
            pm2 sudo pm2 startup -u vagrant
            pm2 start index.js --name "instancia1"
            pm2 save
            sudo chown vagrant:vagrant /home/vagrant/.pm2/rpc.sock /home/vagrant/.pm2/pub.sock
        SHELL
  end

  config.vm.define "instancia2" do |i2|
        i2.vm.box = "centos/7"
        i2.vm.network "private_network", ip: "192.168.33.31"
        i2.ssh.insert_key = false
        i2.vm.provision :shell, :inline => "sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/g' /etc/ssh/sshd_config; sudo systemctl restart sshd;", run: "always"
        i2.vm.provision "shell", inline: <<-SHELL
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
            yum install -y git
            mkdir test
            cd test
            git clone https://github.com/JJRINCON/serviceL1SD.git --branch master --single-branch
            sleep 4s
            cd serviceL1SD
            npm install
            npm install -g pm2
            export PATH=/usr/bin:$PATH
            export PM2_HOME="/home/vagrant/.pm2"
            pm2 sudo pm2 startup -u vagrant
            pm2 start index.js --name "instancia2"
            pm2 save
            sudo chown vagrant:vagrant /home/vagrant/.pm2/rpc.sock /home/vagrant/.pm2/pub.sock
        SHELL
  end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
